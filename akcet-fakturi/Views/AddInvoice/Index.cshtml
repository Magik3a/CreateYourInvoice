@using akcetDB
@using Kendo.Mvc.UI
@model akcetDB.ProductInvoiceTemp
@{
    ViewBag.Title = "Index";
    Layout = "~/Views/Shared/_LayoutUser.cshtml";
}

<h2>Index</h2>

@(Html.Kendo().Grid<akcetDB.ProductInvoiceTemp>()
            .Name("grid")
            .Columns(columns =>
            {
            columns.Bound(c => c.ProductID).Template(@<text>@Html.Partial("InvoicesPartials/_TabProductsPartial")</text>);
                columns.Command(commands =>
                {
                    commands.Edit(); // The "edit" command will edit and update data items.
                    commands.Destroy(); // The "destroy" command removes data items.
                }).Title("Commands").Width(200);
            })
            .ToolBar(toolbar => toolbar.Create()) // The "create" command adds new data items.
            .Editable(editable => editable.Mode(GridEditMode.InLine)) // Use inline editing mode.
            .DataSource(dataSource =>
                dataSource.Ajax()
                  .Model(model =>
                  {
                      model.Id(product => product.ProductID); // Specify the property which is the unique identifier of the model.
                      model.Field(product => product.ProductID).Editable(false); // Make the ProductID property not editable.
                  })
                  .Create(create => create.Action("Products_Create", "AddInvoice")) // Action invoked when the user saves a new data item.
                  .Read(read => read.Action("Products_Read", "AddInvoice"))  // Action invoked when the grid needs data.
                  .Update(update => update.Action("Products_Update", "AddInvoice"))  // Action invoked when the user saves an updated data item.
                  .Destroy(destroy => destroy.Action("Products_Destroy", "AddInvoice")) // Action invoked when the user removes a data item.
            )
            .Pageable().ToClientTemplate() )
